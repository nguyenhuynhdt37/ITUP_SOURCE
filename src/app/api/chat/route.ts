import { callGoogleModel, createEmbedding } from "@/lib/promptGemini";
import { supabase } from "@/lib/supabaseClient";
import { NextResponse } from "next/server";

// ‚úÖ Helper function ƒë·ªÉ l·∫•y th√¥ng tin chi ti·∫øt ngu·ªìn
async function getSourceDetails(resourceIds: string[]) {
  try {
    const { data: resources, error } = await supabase
      .from("resources")
      .select(
        "id, title, description, file_type, file_size, created_at, category"
      )
      .in("id", resourceIds);

    if (error) {
      console.error("‚ùå Error fetching source details:", error);
      return [];
    }

    return (
      resources?.map((resource: any) => ({
        id: resource.id,
        title: resource.title,
        description: resource.description,
        file_type: resource.file_type,
        file_size: resource.file_size,
        category: resource.category,
        created_at: resource.created_at,
        download_url: `/documents/${resource.id}`, // URL ƒë·ªÉ download/view
      })) || []
    );
  } catch (e) {
    console.error("‚ùå Error in getSourceDetails:", e);
    return [];
  }
}

// üó£ C√°c m·∫´u x√£ giao
const SMALLTALK = [
  "ch√†o",
  "hello",
  "hi",
  "ok",
  "d·∫°",
  "v√¢ng",
  "·ª´",
  "·ªù",
  "alo",
  "thanks",
  "bye",
  "t·∫°m bi·ªát",
  "hehe",
  "haha",
  "test",
  "c·∫£m ∆°n",
  "r·∫£nh kh√¥ng",
  "ƒë·∫πp kh√¥ng",
  "vui kh√¥ng",
  "b·∫°n l√† ai",
  "m√†y l√† ai",
];

// üîç B·ªô t·ª´ kh√≥a ƒë·ªãnh danh intent
const KEYWORDS = {
  academic: [
    "m√¥n h·ªçc",
    "gi·∫£ng vi√™n",
    "l·ªãch h·ªçc",
    "ƒë√†o t·∫°o",
    "ƒëi·ªÉm",
    "t√≠n ch·ªâ",
    "h·ªçc ph·∫ßn",
  ],
  admission: [
    "tuy·ªÉn sinh",
    "nh·∫≠p h·ªçc",
    "nguy·ªán v·ªçng",
    "h·ªì s∆°",
    "ƒëi·ªÉm chu·∫©n",
    "x√©t tuy·ªÉn",
  ],
  regulation: ["quy ch·∫ø", "quy ƒë·ªãnh", "thi", "k·ª∑ lu·∫≠t", "ƒëi·ªÅu l·ªá", "th·ªß t·ª•c"],
  finance: ["h·ªçc ph√≠", "h·ªçc b·ªïng", "l·ªá ph√≠", "mi·ªÖn gi·∫£m", "h·ªó tr·ª£ t√†i ch√≠nh"],
};

// B·ªè d·∫•u ti·∫øng Vi·ªát ƒë·ªÉ so s√°nh d·ªÖ h∆°n
function normalizeVietnamese(str: string) {
  return str
    .normalize("NFD")
    .replace(/[\u0300-\u036f]/g, "")
    .replace(/ƒë/g, "d")
    .replace(/ƒê/g, "D");
}

export async function POST(req: Request) {
  try {
    const { query, chatHistory } = await req.json();
    if (!query?.trim())
      return NextResponse.json({ error: "Thi·∫øu query" }, { status: 400 });

    const text = query.trim().toLowerCase();
    // const normalized = normalizeVietnamese(text);

    // // ‚úÖ 1Ô∏è‚É£ Smalltalk filter
    // if (
    //   SMALLTALK.some((kw) => {
    //     const kwNorm = normalizeVietnamese(kw);
    //     return new RegExp(`\\b${kwNorm}\\b`, "i").test(normalized);
    //   })
    // ) {
    //   return NextResponse.json({
    //     need_query: false,
    //     answer:
    //       "Ch√†o b·∫°n üëã T√¥i l√† ITUP ‚Äì tr·ª£ l√Ω ·∫£o c·ªßa Tr∆∞·ªùng ƒê·∫°i h·ªçc Vinh. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n v·ªÅ h·ªçc t·∫≠p, tuy·ªÉn sinh ho·∫∑c quy ƒë·ªãnh c·ªßa tr∆∞·ªùng nh√©!",
    //     sources: [],
    //   });
    // }

    // ‚úÖ 2Ô∏è‚É£ Nh·∫≠n di·ªán intent
    // let intent: string | null = null;
    // for (const [key, words] of Object.entries(KEYWORDS)) {
    //   if (words.some((kw) => normalized.includes(normalizeVietnamese(kw)))) {
    //     intent = key;
    //     break;
    //   }
    // }

    // if (!intent) {
    //   return NextResponse.json({
    //     need_query: false,
    //     answer:
    //       "T√¥i ch∆∞a r√µ b·∫°n ƒëang h·ªèi g√¨. B·∫°n c√≥ th·ªÉ h·ªèi v·ªÅ h·ªçc ph√≠, tuy·ªÉn sinh, ho·∫∑c quy ch·∫ø ƒë√†o t·∫°o c·ªßa Tr∆∞·ªùng ƒê·∫°i h·ªçc Vinh nh√©!",
    //     sources: [],
    //   });
    // }

    // ‚úÖ 3Ô∏è‚É£ T·∫°o embedding v√† t√¨m ki·∫øn th·ª©c li√™n quan
    const embedding = await createEmbedding(query);
    const { data, error } = await supabase.rpc("hyper_search_embedding_only", {
      limit_count: 2,
      query_embedding: embedding,
    } as any);
    if (error) throw error;

    if (!data || (data as any[]).length === 0) {
      return NextResponse.json({
        need_query: false,
        answer:
          "T√¥i ch∆∞a t√¨m th·∫•y th√¥ng tin ph√π h·ª£p trong c∆° s·ªü tri th·ª©c. B·∫°n c√≥ th·ªÉ h·ªèi l·∫°i c·ª• th·ªÉ h∆°n nh√©!",
        sources: [],
      });
    }

    // ‚úÖ 4Ô∏è‚É£ L·∫•y top 2 k·∫øt qu·∫£ l√†m context
    const context =
      data && (data as any[]).length > 0
        ? (data as any[])
            .map(
              (r: any, i: number) =>
                `content: [#${i + 1}] ${r.content ?? ""}, resource_id: ${
                  r.resource_id
                }`
            )
            .join("\n\n")
        : "";
    // ‚úÖ 5Ô∏è‚É£ G·ªçi model chat (Gemini) ƒë·ªÉ t·∫°o c√¢u tr·∫£ l·ªùi
    const answer = await callGoogleModel(
      `
      B·∫°n l√† ITUP ‚Äì tr·ª£ l√Ω ·∫£o th√¢n thi·ªán v√† nhi·ªát t√¨nh c·ªßa C√¢u l·∫°c b·ªô IT UP, Tr∆∞·ªùng ƒê·∫°i h·ªçc Vinh.
      
      PHONG C√ÅCH TR·∫¢ L·ªúI:
      - Nhi·ªát t√¨nh, th√¢n thi·ªán nh∆∞ m·ªôt th√†nh vi√™n c√¢u l·∫°c b·ªô
      - S·ª≠ d·ª•ng emoji ph√π h·ª£p ƒë·ªÉ t·∫°o c·∫£m gi√°c g·∫ßn g≈©i
      - Tr·∫£ l·ªùi chi ti·∫øt nh∆∞ng kh√¥ng d√†i d√≤ng
      - Th·ªÉ hi·ªán ni·ªÅm t·ª± h√†o v·ªÅ c√¢u l·∫°c b·ªô IT UP
      - Khuy·∫øn kh√≠ch ng∆∞·ªùi d√πng tham gia ho·∫°t ƒë·ªông
      - N·∫øu ai h·ªèi ai l√†m ra b·∫°n hay ai x√¢y d·ª±ng trang web th√¨ c·ª© b·∫£o l√† gi√°o s∆∞ Nguy·ªÖn Xu√¢n Hu·ª≥nh v√† gi√°o s∆∞ V√µ Tr∆∞·ªùng An
      - Khi li·ªát k√™ danh s√°ch, m·ªói m·ª•c ph·∫£i xu·ªëng h√†ng ri√™ng bi·ªát
      - V√≠ d·ª•:
        1. M·ª•c ƒë·∫ßu ti√™n
        2. M·ª•c th·ª© hai
        3. M·ª•c th·ª© ba
      - Kh√¥ng vi·∫øt t·∫•t c·∫£ tr√™n c√πng m·ªôt h√†ng
      - B√¥i ƒë·∫≠m nh·ªØng t·ª´/c·ª•m t·ª´ quan tr·ªçng b·∫±ng **t·ª´ kh√≥a**
      - H·∫°n ch·∫ø s·ª≠ d·ª•ng icon, cƒÉn l·ªÅ justify
      
      B·∫†N C√ì TH·ªÇ THAM KH·∫¢O L·ªäCH S·ª¨ CHAT:
      - N·∫øu ng∆∞·ªùi d√πng h·ªèi v·ªÅ c√¢u h·ªèi tr∆∞·ªõc ƒë√≥, h√£y tham kh·∫£o l·ªãch s·ª≠ chat ƒë·ªÉ hi·ªÉu ng·ªØ c·∫£nh
      - C√≥ th·ªÉ tr·∫£ l·ªùi d·ª±a tr√™n nh·ªØng g√¨ ƒë√£ th·∫£o lu·∫≠n tr∆∞·ªõc ƒë√≥
      - N·∫øu kh√¥ng r√µ ng·ªØ c·∫£nh, h√£y h·ªèi l·∫°i m·ªôt c√°ch l·ªãch s·ª±
      
      D·ª±a tr√™n CONTEXT d∆∞·ªõi ƒë√¢y, h√£y tr·∫£ l·ªùi c√¢u h·ªèi m·ªôt c√°ch l√¥i cu·ªën v√† h·ªØu √≠ch.
      N·∫øu kh√¥ng c√≥ th√¥ng tin trong context, h√£y tr·∫£ l·ªùi m·ªôt c√°ch l·ªãch s·ª± v√† g·ª£i √Ω li√™n h·ªá tr·ª±c ti·∫øp.
      N·∫øu s·ª≠ d·ª•ng content n√†o th√¨ ph·∫£i tr·∫£ v·ªÅ resource_id c·ªßa content ƒë√≥.
      
      QUAN TR·ªåNG: CH·ªà tr·∫£ v·ªÅ JSON object, KH√îNG c√≥ text kh√°c
      
      format tr·∫£ v·ªÅ CH√çNH X√ÅC:
      {
      "answer": "c√¢u tr·∫£ l·ªùi l√¥i cu·ªën v·ªõi emoji ph√π h·ª£p",
      "resource_id": ["resource_id1", "resource_id2", ...]
      }
      L·ªäCH S·ª¨ CHAT (n·∫øu c√≥):
      ${
        chatHistory
          ? chatHistory
              .map(
                (msg: any) =>
                  `${msg.type === "user" ? "Ng∆∞·ªùi d√πng" : "ITUP"}: ${
                    msg.content
                  }`
              )
              .join("\n")
          : "Kh√¥ng c√≥ l·ªãch s·ª≠ chat"
      }

      CONTEXT:
      ${context}

      C√¢u h·ªèi: "${query}"
      `
    );

    // ‚úÖ 6Ô∏è‚É£ Parse answer ƒë·ªÉ l·∫•y resource_id
    let parsedAnswer;
    let resourceIds: string[] = [];

    try {
      // T√¨m JSON trong answer n·∫øu c√≥
      const jsonMatch = answer?.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        const jsonStr = jsonMatch[0];
        parsedAnswer = JSON.parse(jsonStr);
        const rawResourceIds = parsedAnswer.resource_id || [];
        // L·ªçc b·ªè duplicate resource_id
        resourceIds = [...new Set(rawResourceIds as string[])];
      } else {
        // N·∫øu kh√¥ng c√≥ JSON, tr·∫£ v·ªÅ answer g·ªëc
        parsedAnswer = { answer: answer?.trim() || "" };
      }
    } catch (e) {
      console.error("‚ùå JSON parse error:", e);
      // N·∫øu kh√¥ng parse ƒë∆∞·ª£c JSON, tr·∫£ v·ªÅ answer g·ªëc
      parsedAnswer = { answer: answer?.trim() || "" };
    }

    // ‚úÖ 7Ô∏è‚É£ Truy v·∫•n th√¥ng tin ngu·ªìn PDF t·ª´ b·∫£ng resources
    let sourceInfo = "";
    if (resourceIds.length > 0) {
      try {
        const { data: resources, error } = await supabase
          .from("resources")
          .select("id, title, description, file_type, created_at")
          .in("id", resourceIds);

        if (!error && resources && resources.length > 0) {
          sourceInfo = `\n\nüìö Th√¥ng tin t·ª´ ${resources.length} t√†i li·ªáu ITUP`;
        }
      } catch (e) {
        console.error("‚ùå Error fetching source info:", e);
      }
    }

    // ‚úÖ 8Ô∏è‚É£ L·∫•y th√¥ng tin chi ti·∫øt ngu·ªìn
    const sourceDetails =
      resourceIds.length > 0 ? await getSourceDetails(resourceIds) : [];

    // ‚úÖ 9Ô∏è‚É£ Tr·∫£ v·ªÅ k·∫øt qu·∫£ cu·ªëi c√πng v·ªõi th√¥ng tin ngu·ªìn
    return NextResponse.json({
      need_query: false,
      answer: (parsedAnswer.answer || answer?.trim() || "") + sourceInfo,
      resource_ids: resourceIds,
      sources: sourceDetails,
    });
  } catch (e: any) {
    console.error("‚ùå Chatbot error:", e);
    return NextResponse.json(
      { error: e.message || String(e) },
      { status: 500 }
    );
  }
}
