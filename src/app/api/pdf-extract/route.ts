export const runtime = "nodejs";

import { NextRequest, NextResponse } from "next/server";
import { extractText } from "unpdf";

export async function POST(req: NextRequest) {
  try {
    const formData = await req.formData();
    const file = formData.get("file") as File;

    if (!file) {
      return NextResponse.json({ error: "Thi·∫øu file PDF" }, { status: 400 });
    }

    const buffer = new Uint8Array(await file.arrayBuffer());

    // üß† G·ªçi engine WASM c·ªßa unpdf
    const result = await extractText(buffer, { mergePages: true });

    // N·∫øu engine kh√¥ng tr·∫£ JSON h·ª£p l·ªá
    if (!result || typeof result.text !== "string") {
      return NextResponse.json(
        { error: "Kh√¥ng th·ªÉ tr√≠ch xu·∫•t n·ªôi dung PDF (unpdf l·ªói n·ªôi b·ªô)." },
        { status: 500 }
      );
    }

    const cleanText = result.text
      .normalize("NFC")
      .replace(/\u0000/g, "")
      .replace(/[ \t]{2,}/g, " ")
      .replace(/\n{3,}/g, "\n\n")
      .trim();

    if (!cleanText || cleanText.length < 10) {
      return NextResponse.json({
        text: "",
        note: "üìÑ PDF c√≥ th·ªÉ l√† ·∫£nh scan, kh√¥ng c√≥ text layer ƒë·ªÉ tr√≠ch xu·∫•t.",
      });
    }

    return NextResponse.json({
      pages: result.totalPages ?? null,
      text: cleanText,
    });
  } catch (err: any) {
    // ‚úÖ Ki·ªÉm so√°t m·ªçi l·ªói, tr√°nh throw text ra ngo√†i
    const msg =
      err?.message?.startsWith("Internal Server Error") ||
      err?.message?.includes("Unexpected token")
        ? "Engine unpdf g·∫∑p l·ªói n·ªôi b·ªô khi ƒë·ªçc file (th∆∞·ªùng do PDF n·∫∑ng ho·∫∑c l·ªói c·∫•u tr√∫c)."
        : err?.message;

    console.error("‚ùå PDF extraction error:", msg);
    return NextResponse.json({ error: msg }, { status: 500 });
  }
}
