/**
 * Google AI Utilities ‚Äì no token limit version
 */
const EMBED_DIM = 3072;

// T·ª± ƒë·ªông l·∫•y URL t·ª´ browser ho·∫∑c server
const getAPIBase = () => {
  // Tr√™n client side (browser)
  if (typeof window !== "undefined") {
    return window.location.origin;
  }

  // Tr√™n server side
  if (process.env.VERCEL_URL) {
    return `https://${process.env.VERCEL_URL}`;
  }

  if (process.env.NEXT_PUBLIC_APP_URL) {
    return process.env.NEXT_PUBLIC_APP_URL;
  }

  // Fallback cho development
  return "http://localhost:3000";
};

/** üß† T·∫°o embedding t·ª´ vƒÉn b·∫£n */
export async function createEmbedding(text: string): Promise<number[]> {
  if (!text?.trim())
    throw new Error("‚ùå VƒÉn b·∫£n tr·ªëng, kh√¥ng th·ªÉ t·∫°o embedding");

  try {
    const baseUrl = getAPIBase();
    const url = `${baseUrl.replace(/\/$/, "")}/api/embed`;

    const res = await fetch(url, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ text: text.trim() }),
    });

    if (!res.ok) {
      const raw = await res.text();
      throw new Error(`Embedding API l·ªói ${res.status}: ${raw}`);
    }

    const data = await res.json();
    const embedding = data?.embedding;

    if (!Array.isArray(embedding) || embedding.length !== EMBED_DIM) {
      throw new Error(
        `Embedding kh√¥ng h·ª£p l·ªá (nh·∫≠n ${
          embedding?.length || 0
        }, c·∫ßn ${EMBED_DIM})`
      );
    }

    return embedding;
  } catch (e) {
    console.error("üí• L·ªói khi t·∫°o embedding:", e);
    throw e;
  }
}

/** ü§ñ G·ªçi model Google AI */
export async function callGoogleModel(prompt: string): Promise<string> {
  if (!prompt?.trim()) return "";
  try {
    const baseUrl = getAPIBase();
    const url = `${baseUrl.replace(/\/$/, "")}/api/generate`;
    const res = await fetch(url, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ prompt: prompt.trim(), temperature: 0.7 }),
    });
    if (!res.ok) throw new Error(await res.text());
    const data = await res.json();
    return (
      data?.output?.trim?.() ||
      data?.candidates?.[0]?.content?.parts?.[0]?.text?.trim?.() ||
      data?.text?.trim?.() ||
      data?.content?.trim?.() ||
      ""
    );
  } catch (e) {
    console.error("üí• Model:", e);
    return "Xin l·ªói, kh√¥ng th·ªÉ t·∫°o n·ªôi dung l√∫c n√†y. Vui l√≤ng th·ª≠ l·∫°i sau.";
  }
}

/** üßπ Clean HTML output */
const cleanHTML = (html: string) => {
  if (!html?.trim()) return "";
  let h = html.replace(/^```(html)?|```$/gm, "").trim();
  h = h
    .replace(/\*\*(.*?)\*\*/g, "<strong>$1</strong>")
    .replace(/\*(.*?)\*/g, "<em>$1</em>");
  h = h.replace(/\n\n/g, "</p><p>").replace(/\n/g, "<br>");
  return h.startsWith("<p>") || h.startsWith("<h") ? h : `<p>${h}</p>`;
};

/** üñºÔ∏è Preserve media */
const preserveMedia = (c: string) => {
  if (!c?.trim()) return "";
  const imgs = Array.from(c.matchAll(/<img[^>]+src="([^"]+)"/g)).map(
    (m) => m[1]
  );
  const links = Array.from(
    c.matchAll(/<a[^>]+href="([^"]+)"[^>]*>([^<]+)<\/a>/g)
  ).map((m) => `${m[2]} -> ${m[1]}`);
  return (
    c +
    (imgs.length ? `\n\n[IMAGES: ${imgs.join(", ")}]` : "") +
    (links.length ? `\n\n[LINKS: ${links.join(", ")}]` : "")
  );
};

/** üìù T√≥m t·∫Øt */
export const generateSummary = async (content: string) =>
  await callGoogleModel(
    `T√≥m t·∫Øt (2-3 c√¢u, ti·∫øng Vi·ªát, tr·∫£ v·ªÅ plain text):\n${content}`
  );

/** üè∑Ô∏è Tags */
export const generateTags = async (content: string) =>
  (
    await callGoogleModel(
      `T·∫°o 3-5 tags (m·ªói d√≤ng 1 tag, ti·∫øng Vi·ªát):\n${content}`
    )
  )
    .split("\n")
    .map((t) => t.trim())
    .filter(Boolean)
    .slice(0, 5);

/** ‚ú® Vi·∫øt l·∫°i n·ªôi dung h·∫•p d·∫´n h∆°n */
export const generateImprovedContent = async (content: string) => {
  const prompt = `Vi·∫øt l·∫°i n·ªôi dung s·ª± ki·ªán hay h∆°n (HTML thu·∫ßn, gi·ªØ nguy√™n link & ·∫£nh), ch·ªâ tr·∫£ v·ªÅ n·ªôi dung ko bao g·ªìm tag html, ... ch·ªâ tr·∫£ v·ªÅ th·∫ª thu·∫ßn, link ·∫£nh gi·ªØ nguy√™n ko thay ƒë·ªïi:
${preserveMedia(content)}
Tr·∫£ v·ªÅ HTML ho√†n ch·ªânh:`;
  return cleanHTML(await callGoogleModel(prompt));
};

/** üì∞ Ti√™u ƒë·ªÅ g·ª£i √Ω */
export const generateTitleSuggestions = async (content: string) =>
  (
    await callGoogleModel(
      `T·∫°o 3 ti√™u ƒë·ªÅ (m·ªói d√≤ng 1 ti√™u ƒë·ªÅ, ti·∫øng Vi·ªát, 10-50 k√Ω t·ª±):\n${content}`
    )
  )
    .split("\n")
    .map((t) => t.trim())
    .filter(Boolean)
    .slice(0, 3);

/** üí° Vi·∫øt b√†i t·ª´ √Ω t∆∞·ªüng */
export async function generateArticleFromIdea(
  idea: string,
  type: "event" | "news" = "event"
) {
  const prompt = `Vi·∫øt b√†i ${
    type === "event" ? "s·ª± ki·ªán" : "tin t·ª©c"
  } ho√†n ch·ªânh d·ª±a tr√™n √Ω t∆∞·ªüng: "${idea}"
HTML chu·∫©n (<h1>, <h2>, <p>...), gi·ªØ nguy√™n c·∫•u tr√∫c, kh√¥ng markdown.`;
  const res = await callGoogleModel(prompt);
  return res?.trim()
    ? cleanHTML(res)
    : `<h1>B√†i vi·∫øt v·ªÅ: ${idea}</h1><p>Kh√¥ng th·ªÉ t·∫°o n·ªôi dung l√∫c n√†y.</p>`;
}

/** üéØ √ù t∆∞·ªüng b√†i vi·∫øt */
export async function generateArticleIdeas(topic: string, count = 5) {
  const res = await callGoogleModel(
    `T·∫°o ${count} √Ω t∆∞·ªüng b√†i vi·∫øt v·ªÅ "${topic}" (m·ªói d√≤ng 1 √Ω t∆∞·ªüng, 10‚Äì30 t·ª´):`
  );
  return res
    .split("\n")
    .map((i) => i.trim())
    .filter(Boolean)
    .slice(0, count);
}

/** üîó Embedding cho content */
export const embedContent = (c: string) => createEmbedding(c);

export function normalizeEmbedding(vec: number[]): number[] {
  const norm = Math.sqrt(vec.reduce((sum, val) => sum + val * val, 0));
  return norm === 0 ? vec : vec.map((v) => v / norm);
}
