"use client";

import * as pdfjsLib from "pdfjs-dist/webpack";

/**
 * üìÑ Tr√≠ch xu·∫•t text ti·∫øng Vi·ªát t·ª´ file PDF (ch·∫°y ·ªü client)
 * - Nh·∫≠n tr·ª±c ti·∫øp File t·ª´ input
 * - T·ª± gh√©p ch·ªØ b·ªã t√°ch r·ªùi (do PDF spacing)
 * - Gi·ªØ d·∫•u ti·∫øng Vi·ªát chu·∫©n NFC
 */
export async function extractTextFromPDFClient(file: File): Promise<string> {
  // ƒê·ªçc file PDF v√† sao ch√©p buffer ƒë·ªÉ tr√°nh l·ªói ‚ÄúArrayBuffer detached‚Äù
  const arrayBuffer = await file.arrayBuffer();
  const bufferCopy = arrayBuffer.slice(0);

  // Kh·ªüi t·∫°o document PDF.js
  const pdf = await pdfjsLib.getDocument({ data: bufferCopy }).promise;
  let fullText = "";

  // Duy·ªát t·ª´ng trang ƒë·ªÉ tr√≠ch text
  for (let i = 1; i <= pdf.numPages; i++) {
    const page = await pdf.getPage(i);
    const textContent = await page.getTextContent();

    // X·ª≠ l√Ω spacing: gh√©p ch·ªØ c√°i li·ªÅn k·ªÅ nhau
    let lastX = 0;
    let lastY = 0;
    let pageText = "";

    for (const item of textContent.items as any[]) {
      const str = item.str ?? "";
      const transform = item.transform;
      const x = transform[4];
      const y = transform[5];
      const distance = Math.abs(x - lastX);
      const lineChange = Math.abs(y - lastY) > 10;

      if (lineChange) pageText += "\n";
      else if (distance > 4) pageText += " ";

      pageText += str;
      lastX = x;
      lastY = y;
    }

    fullText += pageText + "\n\n";
  }

  // // Chu·∫©n h√≥a ti·∫øng Vi·ªát + l·ªçc k√Ω t·ª± l·∫°
  // const cleanText = fullText
  //   .normalize("NFC")
  //   .replace(/(\p{L})\s+(\p{L})/gu, "$1$2") // g·ªôp k√Ω t·ª± t√°ch b·ªüi kho·∫£ng tr·∫Øng ·∫£o
  //   .replace(/[^\w√Ä-·ªπ\s.,?!:;()\-‚Äì‚Äî]/g, " ") // lo·∫°i k√Ω t·ª± r√°c
  //   .replace(/\s{2,}/g, " ") // b·ªè kho·∫£ng tr·∫Øng th·ª´a
  //   .replace(/\n{2,}/g, "\n\n") // gi·ªØ ƒëo·∫°n h·ª£p l√Ω
  //   .trim();

  return fullText;
}
